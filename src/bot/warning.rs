//! Module de gestion des avertissements avant d√©connexion.

use rand::seq::IteratorRandom;
use serenity::{
    builder::{CreateEmbed, CreateMessage},
    client::Context as SerenityContext,
    model::{guild::Member, Colour},
};

use crate::{config::BotConfig, utils::{log_error, log_info}};

/// Collection de GIFs d'avertissement √† rotation al√©atoire
const WARNING_GIFS: &[&str] = &[
    "https://media.giphy.com/media/l3q2XhfQ8oCkm1Ts4/giphy.gif", // Homer Simpson qui dort
    "https://media.giphy.com/media/BLmBG0HPIoaoo/giphy.gif",     // Chat qui baille
    "https://media.giphy.com/media/3og0IMJcSI8p6hYQXS/giphy.gif", // Personne qui s'endort devant un ordi
    "https://media.giphy.com/media/KbhCl6QjGhsf48CvPW/giphy.gif", // R√©veil qui sonne
    "https://media.giphy.com/media/l0MYOrDnJFJZT6NdC/giphy.gif",  // "Time to sleep" 
    "https://media.giphy.com/media/xT9IgAINmcY6UwRQc0/giphy.gif", // Horloge qui tourne
    "https://media.giphy.com/media/nnFwGHgE4Mk5W/giphy.gif",     // B√©b√© qui dort paisiblement
    "https://media.giphy.com/media/3o7ZeQBhbVGnELP4bK/giphy.gif", // "Good night" vintage
];

/// Messages d'avertissement √† rotation al√©atoire
const WARNING_MESSAGES: &[&str] = &[
    "üõèÔ∏è **C'est l'heure du dodo !** üõèÔ∏è\n\nL'heure du coucher a sonn√© ! Tous les noctambules encore en vocal, vous avez **{delay} secondes** pour dire bonne nuit avant que le marchand de sable ne vous emporte de force ! üò¥‚ú®",
    
    "üåô **Alerte couvre-feu !** üåô\n\nOyez oyez ! Il est maintenant l'heure officielle de rejoindre Morph√©e ! Les derniers r√©sistants ont **{delay} secondes** pour quitter les lieux avant √©vacuation forc√©e ! üö®üí§",
    
    "üïê **Tic-tac, tic-tac...** üïê\n\nLe temps s'√©coule et vos paupi√®res s'alourdissent... Plus que **{delay} secondes** avant que le bot ne vous aide √† aller au lit ! (Que vous le vouliez ou non üòà)",
    
    "üßô‚Äç‚ôÇÔ∏è **Sortil√®ge de sommeil imminent !** üßô‚Äç‚ôÇÔ∏è\n\nAttention mes chers insomniaques ! Dans **{delay} secondes**, un puissant sort de d√©connexion sera lanc√© sur ce salon ! Fuyez tant qu'il est encore temps ! ‚ö°",
    
    "üé≠ **Dernier appel avant la fermeture !** üé≠\n\nComme au th√©√¢tre : 'Mesdames et Messieurs, dans **{delay} secondes**, le rideau tombera sur ce salon vocal. Merci de r√©cup√©rer vos affaires et de quitter tranquillement les lieux !' üé™",
    
    "ü¶∏‚Äç‚ôÇÔ∏è **Capitaine Couche-T√¥t √† votre service !** ü¶∏‚Äç‚ôÇÔ∏è\n\nJe vois encore des super-h√©ros qui tra√Ænent dans les parages ! Vous avez **{delay} secondes** pour regagner votre QG (votre lit) avant que je n'intervienne ! üí™üò¥"
];

/// Gestionnaire des messages d'avertissement
pub struct WarningManager {
    config: BotConfig,
}

impl WarningManager {
    /// Cr√©e une nouvelle instance du gestionnaire d'avertissements
    pub fn new(config: BotConfig) -> Self {
        Self { config }
    }

    /// Envoie un avertissement aux utilisateurs pr√©sents dans le salon vocal
    /// 
    /// # Arguments
    /// 
    /// * `ctx` - Contexte Serenity pour les interactions Discord
    /// * `members` - Liste des membres pr√©sents dans le salon vocal
    /// * `voice_channel_name` - Nom du salon vocal concern√©
    /// 
    /// # Returns
    /// 
    /// `true` si l'avertissement a √©t√© envoy√© avec succ√®s, `false` sinon
    pub async fn send_warning(
        &self,
        ctx: &SerenityContext,
        members: &[Member],
        voice_channel_name: &str,
    ) -> bool {
        let Some(warning_channel_id) = self.config.warning_channel_id else {
            return false;
        };

        if members.is_empty() {
            return false;
        }

        let warning_message = self.generate_warning_message(members);
        let gif_url = self.select_random_gif();

        let embed = CreateEmbed::new()
            .title("üö® ALERTE COUVRE-FEU üö®")
            .description(&warning_message)
            .color(Colour::from_rgb(255, 165, 0)) // Orange
            .image(gif_url)
            .footer(serenity::builder::CreateEmbedFooter::new(
                format!("Salon concern√©: {} | Bot LeKickerFou", voice_channel_name)
            ))
            .timestamp(serenity::model::Timestamp::now());

        let message = CreateMessage::new().embed(embed).content({
            let mentions = members
                .iter()
                .map(|m| format!("<@{}>", m.user.id))
                .collect::<Vec<_>>()
                .join(" ");
            format!("üëã {mentions}")
        });

        match warning_channel_id.send_message(ctx, message).await {
            Ok(_) => {
                log_info(&format!(
                    "üö® Avertissement envoy√© √† {} utilisateur(s) dans #{} via le salon d'avertissement",
                    members.len(),
                    voice_channel_name
                ));
                true
            }
            Err(e) => {
                log_error(&format!(
                    "Impossible d'envoyer l'avertissement dans le salon: {}",
                    e
                ));
                false
            }
        }
    }

    /// G√©n√®re un message d'avertissement personnalis√©
    fn generate_warning_message(&self, members: &[Member]) -> String {
        let mut rng = rand::rng();
        let base_message = WARNING_MESSAGES
            .iter()
            .choose(&mut rng)
            .unwrap_or(&WARNING_MESSAGES[0]);
        
        let delay = self.config.warning_delay_seconds;
        let message = base_message.replace("{delay}", &delay.to_string());

        let user_list = if members.len() == 1 {
            format!("**Cible d√©sign√©e :** {}", members[0].display_name())
        } else {
            let names = members
                .iter()
                .map(|m| format!("‚Ä¢ {}", m.display_name()))
                .collect::<Vec<_>>()
                .join("\n");
            format!("**Cibles d√©sign√©es ({}) :**\n{}", members.len(), names)
        };

        let action_text = if self.config.is_warning_only_mode() {
            "üíå *Mode gentil activ√© - Aucune d√©connexion ne sera effectu√©e, ceci n'est qu'un rappel amical !*"
        } else {
            "‚ö†Ô∏è *Cette menace est bien r√©elle ! D√©connexion automatique programm√©e !*"
        };

        format!("{}\n\n{}\n\n{}", message, user_list, action_text)
    }

    /// S√©lectionne un GIF al√©atoire dans la collection
    fn select_random_gif(&self) -> &str {
        let mut rng = rand::rng();
        WARNING_GIFS
            .iter()
            .choose(&mut rng)
            .unwrap_or(&WARNING_GIFS[0])
    }

    /// Attendre le d√©lai configur√© avant de proc√©der √† l'action
    pub async fn wait_warning_delay(&self) {
        let delay = self.config.warning_delay();
        log_info(&format!("‚è≥ Attente de {} secondes avant action...", delay.as_secs()));
        tokio::time::sleep(delay).await;
    }
}

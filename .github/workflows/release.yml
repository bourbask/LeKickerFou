name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    environment: production
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate tag format
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Tag format invalide. Utilisez le format v1.0.0"
            exit 1
          fi
          echo "‚úÖ Tag format valide: ${{ github.ref_name }}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## üöÄ Nouvelle version : ${{ github.ref_name }}

            ### üìã Changements
            <!-- D√©crivez les changements ici -->

            ### üì¶ T√©l√©chargements
            - **Linux x86_64**: [lekickerfou-linux-x86_64](https://github.com/bourbask/LeKickerFou/releases/download/${{ github.ref_name }}/lekickerfou-linux-x86_64)
            - **Windows x86_64**: [lekickerfou-windows-x86_64.exe](https://github.com/bourbask/LeKickerFou/releases/download/${{ github.ref_name }}/lekickerfou-windows-x86_64.exe)
            - **macOS x86_64**: [lekickerfou-macos-x86_64](https://github.com/bourbask/LeKickerFou/releases/download/${{ github.ref_name }}/lekickerfou-macos-x86_64)
            - **macOS ARM64**: [lekickerfou-macos-arm64](https://github.com/bourbask/LeKickerFou/releases/download/${{ github.ref_name }}/lekickerfou-macos-arm64)

            ### üîß Installation
            ```bash
            # Linux/macOS
            curl -L https://github.com/bourbask/LeKickerFou/releases/download/${{ github.ref_name }}/lekickerfou-linux-x86_64 -o lekickerfou
            chmod +x lekickerfou
            ```
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: lekickerfou-linux-x86_64
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            name: lekickerfou-windows-x86_64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: lekickerfou-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: lekickerfou-macos-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.os != 'windows-latest' && !contains(matrix.target, 'windows')
        run: strip target/${{ matrix.target }}/release/lekickerfou

      - name: Rename binary
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ] || [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.target }}/release/lekickerfou.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/lekickerfou ${{ matrix.name }}
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

  publish-cargo:
    name: Publish to Cargo
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    environment: production
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
